apiVersion: v1
kind: Service
metadata:
  name: relation-repl
  namespace: sol
spec:
  clusterIP: None
  ports:
  - name: mysql
    port: 3306
  - name: repl
    port: 33061
  selector:
    app: relation

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: relation-repl
  namespace: sol
data:
  repl.sql: |
    DROP USER IF EXISTS 'repl';
    CREATE USER 'repl';
    GRANT REPLICATION SLAVE, BACKUP_ADMIN ON *.* TO 'repl';
    CHANGE REPLICATION SOURCE TO SOURCE_USER='repl' FOR CHANNEL 'group_replication_recovery';
  repl.sh: |
    #!/bin/sh
    echo "plugin_load_add=\"group_replication.so\"" >> /etc/mysql/my.cnf
    echo "group_replication_group_name=\"36386f48-eb5c-55cb-96a9-62e5aa19f604\"" >> /etc/mysql/my.cnf
    echo "group_replication_single_primary_mode=OFF" >> /etc/mysql/my.cnf
    echo "group_replication_enforce_update_everywhere_checks=ON" >> /etc/mysql/my.cnf
    echo "group_replication_local_address=\"relation-${HOSTNAME##*-}.relation-repl.sol.svc.cluster.local:33061\"" >> /etc/mysql/my.cnf
    echo "group_replication_group_seeds=\"relation-0.relation-repl.sol.svc.cluster.local:33061,relation-1.relation-repl.sol.svc.cluster.local:33061,relation-2.relation-repl.sol.svc.cluster.local:33061\""  >> /etc/mysql/my.cnf

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: relation
  namespace: sol
spec:
  serviceName: relation-repl
  replicas: 3
  selector:
    matchLabels:
      app: relation
  template:
    metadata:
      labels:
        app: relation
        backend: app
    spec:
      containers:
      - name: relation
        image: mysql/mysql-server:latest
        ports:
        - containerPort: 3306
        - containerPort: 33060
        - containerPort: 33061
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: Relation@Mysql8.0
        resources:
          requests:
            cpu: 10m
            memory: 128Mi
          limits:
            cpu: 4000m
            memory: 4Gi
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
        - name: relation-conf
          mountPath: /etc/mysql/my.cnf
          subPath: my.cnf
        - name: relation-init
          mountPath: /docker-entrypoint-initdb.d/init.sql
          subPath: init.sql
        - name: relation-repl
          mountPath: /docker-entrypoint-initdb.d/repl.sql
          subPath: repl.sql
        - name: relation-repl
          mountPath: /docker-entrypoint-initdb.d/repl.sh
          subPath: repl.sh
        lifecycle:
          postStart:
            exec:
              command:
              - sh
              - "-c"
              - |
                if [ "${HOSTNAME##*-}" == "0" ]; then
                  sleep 15
                  while ! mysqladmin -u repl version; do
                    sleep 5
                  done
                  sed -i '/loose-group_replication_bootstrap_group=ON/d' /etc/mysql/my.cnf
                fi
      initContainers:
      - name: init
        image: busybox:latest
        command:
        - sh
        - "-c"
        - |
          set -eux
          if [ ! -f "/root/mysql/my.cnf" ]; then
            echo "[mysqld]" > /root/mysql/my.cnf
            echo "disabled_storage_engines=\"MyISAM,BLACKHOLE,FEDERATED,ARCHIVE,MEMORY\"" >> /root/mysql/my.cnf
            echo "gtid_mode=ON" >> /root/mysql/my.cnf
            echo "enforce_gtid_consistency=ON" >> /root/mysql/my.cnf
            echo "relay_log=\"relation-${HOSTNAME##*-}-relay-bin\"" >> /root/mysql/my.cnf
            echo "report_host=\"relation-${HOSTNAME##*-}.relation-repl.sol.svc.cluster.local\"" >> /root/mysql/my.cnf
            echo "server_id=$((${HOSTNAME##*-}+1))" >> /root/mysql/my.cnf
          fi
          if [ "${HOSTNAME##*-}" == "0" ]; then
            echo "loose-group_replication_bootstrap_group=ON" >> /root/mysql/my.cnf
          fi
        volumeMounts:
        - name: relation-conf
          mountPath: /root/mysql
      volumes:
      - name: relation-conf
        emptyDir:
          sizeLimit: 8Ki
      - name: relation-init
        configMap:
          name: relation-init
      - name: relation-repl
        configMap:
          name: relation-repl
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 1Gi
